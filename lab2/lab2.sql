--创建表USER
create table USERS (
UID int PRIMARY KEY, 
UNAME char(30),     --姓名
USEX char(2),       --性别，Ascii码站两个字节 
BYEAR int,          --出生年份
CITY char(20)       --城市
);

--创建表LABEL，分类
create table LABEL(
LID int PRIMARY KEY,    
LNAME char(20)          
);

--创建表MBLOG，博文
CREATE TABLE MBLOG(
BID int PRIMARY KEY,				 
TITLE char(30),
UID int,
PYEAR int, PMONTH int, PDAY int,
CONT char(140),
FOREIGN KEY(UID) REFERENCES USERS(UID),
);

--创建表B_L 博文标注 作者给博文的标签
CREATE TABLE B_L(
BID int, 
LID int,
FOREIGN KEY(BID) REFERENCES MBLOG(BID),
FOREIGN KEY(LID) REFERENCES LABEL(LID),
PRIMARY KEY (LID,BID)
);

--创建表FOLLOW，记录每位用户关注的其他用户
CREATE TABLE FOLLOW(
	UID int,
	UIDFLED int,
	FOREIGN KEY(UID) REFERENCES USERS(UID),
	FOREIGN KEY(UIDFLED) REFERENCES USERS(UID),
	PRIMARY KEY(UID,UIDFLED)
)

--创建表FRIENDS，记录每位用户的好友
CREATE TABLE FRIENDS(
	UID int,
	FUID int,
	FOREIGN KEY(UID) REFERENCES USERS(UID),
	FOREIGN KEY(FUID) REFERENCES USERS(UID),
	PRIMARY KEY(UID,FUID)
)

--创建表订阅SUB，记录用户订阅的分类
CREATE TABLE SUB(
	UID int,
	LID int,
	FOREIGN KEY(UID) REFERENCES USERS(UID),
	FOREIGN KEY(LID) REFERENCES LABEL(LID),
	PRIMARY KEY(UID,LID)
)

--创建表点赞THUMB
CREATE TABLE THUMB(
	UID int,
	BID int,
	FOREIGN KEY(UID) REFERENCES USERS(UID),
	FOREIGN KEY(BID) REFERENCES MBLOG(BID),
	PRIMARY KEY(UID,BID)
)

--创建表头条TOPDAY
CREATE TABLE TOPDAY(
	TYEAR int, TMONTH int, TDAY int,		--日期
	BID int,								--博文号
	TNO int									--博文在前十中的排名
)


--2.2


--触发器


DROP  TRIGGER if exists THUMB_SELF;
DROP TRIGGER if exists THUMB_SELF_UPDATE
GO
CREATE TRIGGER THUMB_SELF
ON THUMB
    AFTER INSERT
AS
    IF (SELECT UID FROM INSERTED) =
       (SELECT UID FROM BLOG WHERE BID = (SELECT BID FROM INSERTED))
        BEGIN
            PRINT 'CANT THUMB ON ITSELF'
            ROLLBACK TRANSACTION
        END

GO
CREATE TRIGGER THUMB_SELF_UPDATE
ON THUMB
    AFTER UPDATE
AS
    IF (SELECT UID FROM INSERTED) =
       (SELECT UID FROM BLOG WHERE BID = (SELECT BID FROM INSERTED))
        BEGIN
            PRINT 'CANT THUMB ON ITSELF'
            ROLLBACK TRANSACTION
        END



--2.3
--1）查询“张三”用户关注的所有用户的ID号、姓名、性别、出生年份，所在城市，
--并且按照出生年份的降序排列，同一个年份的则按照用户ID号升序排列。

SELECT USERS.UID, UNAME, USEX, BYEAR, CITY
FROM USERS 
WHERE UID IN(
	SELECT UIDFLED					--确定张三关注的人的UID
	FROM FOLLOW
	WHERE UID IN(					--确定张三的UID
		SELECT UID
		FROM USERS
		WHERE UNAME = '张三'
	)
)
ORDER BY BYEAR DESC, USERS.UID;

--2)查找没有被任何人点赞的博文ID、标题以及发表者姓名，
--并将结果按照标题字符顺序排列。

SELECT BID, TITLE, USERS.UNAME 
FROM MBLOG,USERS
WHERE MBLOG.UID = USERS.UID AND
		NOT EXISTS(
			SELECT *
			FROM THUMB
			WHERE BID = MBLOG.BID
		)
ORDER BY TITLE;

--3)查找2000年以后出生的武汉市用户发表的进入过头条的博文ID

SELECT BID
FROM TOPDAY 
WHERE EXISTS(
	SELECT *
	FROM MBLOG
	WHERE BID = TOPDAY.BID AND
			EXISTS(
				SELECT *
				FROM USERS
				WHERE UID = MBLOG.UID AND
						BYEAR > 2000 AND
						CITY  = '武汉'
			)
);

--4)查找订阅了所有分类的用户ID

SELECT UID
FROM USERS
WHERE NOT EXISTS(
	SELECT *
	FROM LABEL 
	WHERE NOT EXISTS(
		SELECT *
		FROM SUB
		WHERE UID = USERS.UID AND 
				LID = LABEL.LID
	)
);

--5）查找出生年份小于1970年或者大于2010年的用户ID、出生年份、所在城市，
--要求where子句中只能有一个条件表达式；

SELECT UID, BYEAR, CITY
FROM USERS
WHERE BYEAR > 2010
UNION 
SELECT UID, BYEAR, CITY
FROM USERS
WHERE BYEAR < 1970;

--6）统计每个城市的用户数

SELECT CITY, COUNT(UID)
FROM USERS
GROUP BY CITY;

--7）统计每个城市的每个出生年份的用户数，并将结果按照城市的升序排列，
--同一个城市按照出生用户数的降序排列其相应的年份；

SELECT CITY, BYEAR, COUNT(UID)
FROM USERS
GROUP BY CITY,BYEAR
ORDER BY CITY, BYEAR DESC;

--8）查找被点赞数超过10的博文ID号；

SELECT BID
FROM THUMB
GROUP BY BID
HAVING COUNT(*) > 10;

--9）查找被2000年后出生的用户点赞数超过10的博文ID号

SELECT BID
FROM THUMB 
WHERE NOT EXISTS(
	SELECT *
	FROM USERS 
	WHERE UID = THUMB.UID AND
		BYEAR < 2000
)
GROUP BY BID
HAVING COUNT(*) > 10;

--10）查找被2000年后出生的用户点赞数超过10的每篇博文的进入头条的次数；

SELECT BID, COUNT(*)
FROM TOPDAY
WHERE EXISTS(
	SELECT *
	FROM THUMB 
	WHERE NOT EXISTS(
		SELECT *
		FROM USERS 
		WHERE UID = THUMB.UID AND
			BYEAR < 2000
	)
	GROUP BY BID
	HAVING COUNT(*) > 10
)
GROUP BY BID;

--11）查找订阅了文学、艺术、哲学、音乐中至少一种分类的用户ID，
--要求不能使用嵌套查询，且where子句中最多只能包含两个条件

SELECT DISTINCT UID 
FROM LABEL, SUB 
WHERE LNAME IN('文学', '艺术', '哲学', '音乐')
	AND SUB.LID = LABEL.LID ;

--12）查找标题中包含了“最多地铁站”和“_华中科技大学”两个词的博文基本信息；

SELECT *
FROM MBLOG
WHERE TITLE LIKE '%最多地铁站%' OR
		TITLE LIKE '%\_华中科技大学%' ESCAPE'\';

--13）查找所有相互关注的用户对的两个ID号，要求不能使用嵌套查询；

SELECT UID, UIDFLED
FROM FOLLOW
INTERSECT
SELECT UIDFLED, UID
FROM FOLLOW;

--14）查找好友圈包含了5号用户好友圈的用户ID；

SELECT DISTINCT UID
FROM FRIENDS F1
WHERE NOT EXISTS
	(SELECT *
	FROM FRIENDS F2
	WHERE U2.UID = 5 AND
		NOT EXISTS 
		(SELECT *
		FROM FRIENDS F3
		WHERE F3.UID = F1.UID AND
			F3.FUID = F2.FUID
		) );



--15）查找2019年4月20日每一篇头条博文的ID号、标题以及该博文的每一个分类ID，
--要求即使该博文没有任何分类ID也要输出其ID号、标题；

SELECT MBLOG.BID, TITLE, LID
FROM MBLOG LEFT OUTER JOIN B_L ON (MBLOG.BID = B_L.BID)
WHERE  EXISTS(
		SELECT *
		FROM TOPDAY
		WHERE TYEAR = 2019 AND TMONTH = 4 AND TDAY = 20 
				AND MBLOG.BID = TOPDAY.BID
	);

--16）查找至少有3名共同好友的所有用户对的两个ID号。
SELECT f3.UID1, f3.UID2
FROM(
	SELECT f1.UID, f2.UID, f1.FUID
	FROM FRIENDS f1, FRIENDS f2
	WHERE f1.FUID = f2.FUID AND f1.UID < f2.UID
) AS f3( UID1, UID2, UIDF)
GROUP BY UID1, UID2
HAVING count(*) >= 3
ORDER BY f3.UID1, f3.UID2;

--17）创建视图：查阅DBMS内部函数，创建一个显示当日热度排名前十的微博信息的视图，
--其中的属性包括：博文ID、博文标题、发表者ID、发表者姓名、被点赞数。
CREATE VIEW VIEW1(BID,TITLE,UID,UNAME,THUMB_COUNT) AS
	SELECT TOPDAY.BID,TITLE,USERS.UID,UNAME,TEMP.TC 
	FROM USERS,TOPDAY,MBLOG LEFT OUTER JOIN (
		SELECT BID,COUNT(BID) 
		FROM THUMB GROUP BY BID) AS TEMP(BID,TC) ON(MBLOG.BID=TEMP.BID)
	WHERE TOPDAY.BID=MBLOG.BID AND MBLOG.UID=USERS.UID
